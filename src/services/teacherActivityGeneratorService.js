import { generateContent } from './geminiDashboardService';

/**
 * Servicio para generar actividades educativas basadas en planes de apoyo
 * Espec√≠fico para profesores que reciben planes del psicopedagogo
 */
export class TeacherActivityGeneratorService {
  
  /**
   * Genera actividades personalizadas basadas en un plan de apoyo
   * @param {Object} plan - Plan de apoyo recibido del psicopedagogo
   * @param {string} subject - Materia espec√≠fica para generar actividades
   * @param {Object} additionalContext - Contexto adicional del profesor
   * @returns {Promise<Object>} - Actividades generadas con IA
   */
  static async generateActivitiesFromPlan(plan, subject = 'Todas las Materias', additionalContext = {}) {
    try {
      console.log('üéì Generando actividades para profesor basadas en plan de apoyo...');
      
      const prompt = this.buildTeacherPrompt(plan, subject, additionalContext);
      
      const result = await generateContent(prompt);
      
      if (result.success) {
        console.log('‚úÖ Actividades generadas exitosamente para profesor');
        return {
          success: true,
          activities: this.parseGeneratedActivities(result.data),
          planId: plan.id,
          studentName: plan.studentName,
          generatedAt: new Date().toISOString()
        };
      } else {
        console.error('‚ùå Error generando actividades:', result.error);
        return {
          success: false,
          error: result.error,
          fallbackActivities: this.getFallbackActivities(plan, subject)
        };
      }
    } catch (error) {
      console.error('‚ùå Error en generaci√≥n de actividades para profesor:', error);
      return {
        success: false,
        error: error.message,
        fallbackActivities: this.getFallbackActivities(plan, subject)
      };
    }
  }

  /**
   * Construye el prompt espec√≠fico para profesores
   * @param {Object} plan - Plan de apoyo
   * @param {string} subject - Materia
   * @param {Object} additionalContext - Contexto adicional
   * @returns {string} - Prompt completo
   */
  static buildTeacherPrompt(plan, subject, additionalContext) {
    return `
Eres un asistente de IA especializado en educaci√≥n que ayuda a profesores a crear actividades personalizadas basadas en planes de apoyo psicopedag√≥gicos.

INFORMACI√ìN DEL ESTUDIANTE:
- Nombre: ${plan.studentName}
- Grado: ${plan.grade}
- Plan de Apoyo: ${plan.planTitle}

RECOMENDACIONES DEL PSICOPEDAGOGO:
${plan.recommendations.map(rec => `- ${rec}`).join('\n')}

RESUMEN DEL PLAN:
${plan.summary}

MATERIA SOLICITADA: ${subject}

CONTEXTO ADICIONAL DEL PROFESOR:
${additionalContext.notes || 'Sin notas adicionales'}

INSTRUCCIONES ESPEC√çFICAS:
1. Crea actividades que implementen DIRECTAMENTE las recomendaciones del psicopedagogo
2. Adapta las actividades al nivel de grado espec√≠fico (${plan.grade})
3. Incluye elementos visuales si se recomienda
4. Proporciona adaptaciones espec√≠ficas para necesidades especiales
5. Aseg√∫rate de que las actividades sean implementables en el aula
6. Incluye m√©todos de evaluaci√≥n apropiados

FORMATO DE RESPUESTA REQUERIDO (JSON v√°lido):
{
  "activities": [
    {
      "id": "act-teacher-001",
      "title": "T√≠tulo espec√≠fico de la actividad",
      "description": "Descripci√≥n detallada de la actividad",
      "objective": "Objetivo espec√≠fico y medible",
      "duration": 45,
      "difficulty": "Intermedio",
      "priority": "Alta",
      "category": "Categor√≠a educativa",
      "materials": ["Material 1", "Material 2", "Material 3"],
      "adaptations": "Adaptaciones espec√≠ficas para el estudiante",
      "instructions": "Instrucciones paso a paso para el profesor",
      "assessment": "M√©todo de evaluaci√≥n",
      "gradeLevel": "${plan.grade}",
      "subject": "${subject}",
      "learningStyle": "Estilo de aprendizaje recomendado",
      "cognitiveDomain": "Dominio cognitivo trabajado",
      "basedOnRecommendations": ["Recomendaci√≥n 1", "Recomendaci√≥n 2"],
      "teacherNotes": "Notas espec√≠ficas para el profesor",
      "implementationTips": "Consejos para implementar la actividad"
    }
  ]
}

IMPORTANTE: 
- Responde SOLO con JSON v√°lido
- Evita comillas dobles dentro de strings
- Incluye al menos 3 actividades diferentes
- Cada actividad debe implementar al menos una recomendaci√≥n espec√≠fica
- Las actividades deben ser pr√°cticas y realizables en el aula
`;
  }

  /**
   * Parsea las actividades generadas por la IA
   * @param {string} data - Datos JSON de respuesta
   * @returns {Array} - Array de actividades parseadas
   */
  static parseGeneratedActivities(data) {
    try {
      const parsed = JSON.parse(data);
      return parsed.activities || [];
    } catch (error) {
      console.error('‚ùå Error parseando actividades generadas:', error);
      return [];
    }
  }

  /**
   * Actividades de fallback espec√≠ficas para profesores
   * @param {Object} plan - Plan de apoyo
   * @param {string} subject - Materia
   * @returns {Array} - Actividades de fallback
   */
  static getFallbackActivities(plan, subject) {
    const baseActivities = [
      {
        id: `fallback-teacher-${Date.now()}-1`,
        title: `Actividad de ${subject} - Comprensi√≥n Visual`,
        description: `Actividad personalizada para ${plan.studentName} basada en las recomendaciones del plan de apoyo, enfocada en ${subject}`,
        objective: `Mejorar habilidades en ${subject} mediante estrategias visuales recomendadas`,
        duration: 45,
        difficulty: 'Intermedio',
        priority: 'Alta',
        category: subject,
        materials: ['Materiales b√°sicos', 'Recursos visuales', 'Fichas de trabajo'],
        adaptations: 'Tiempo extra y apoyo visual seg√∫n recomendaciones del plan',
        instructions: '1. Presentaci√≥n visual del contenido. 2. Actividades guiadas. 3. Evaluaci√≥n formativa.',
        assessment: 'Evaluaci√≥n continua del progreso seg√∫n el plan de apoyo',
        gradeLevel: plan.grade,
        subject: subject,
        learningStyle: 'Visual',
        cognitiveDomain: 'Comprensi√≥n y Aplicaci√≥n',
        basedOnRecommendations: plan.recommendations.slice(0, 2),
        teacherNotes: 'Actividad dise√±ada espec√≠ficamente para este estudiante basada en su plan de apoyo',
        implementationTips: 'Proporcionar apoyo visual y tiempo adicional seg√∫n las recomendaciones',
        aiGenerated: true,
        generatedBy: 'Teacher AI Assistant (Fallback)',
        timestamp: new Date().toISOString(),
        basedOnPlan: plan.id
      },
      {
        id: `fallback-teacher-${Date.now()}-2`,
        title: `Actividad de ${subject} - Pr√°ctica Guiada`,
        description: `Ejercicios pr√°cticos adaptados para ${plan.studentName} seg√∫n las necesidades identificadas en su plan de apoyo`,
        objective: `Consolidar conocimientos en ${subject} mediante pr√°ctica estructurada`,
        duration: 40,
        difficulty: 'Intermedio',
        priority: 'Media',
        category: subject,
        materials: ['Ejercicios adaptados', 'Material de apoyo', 'Herramientas de evaluaci√≥n'],
        adaptations: 'Instrucciones claras y apoyo individualizado',
        instructions: '1. Explicaci√≥n del objetivo. 2. Demostraci√≥n pr√°ctica. 3. Pr√°ctica guiada. 4. Evaluaci√≥n.',
        assessment: 'Observaci√≥n directa y registro de progreso',
        gradeLevel: plan.grade,
        subject: subject,
        learningStyle: 'Pr√°ctico',
        cognitiveDomain: 'Aplicaci√≥n',
        basedOnRecommendations: plan.recommendations.slice(1, 3),
        teacherNotes: 'Enfocarse en las √°reas espec√≠ficas mencionadas en el plan de apoyo',
        implementationTips: 'Proporcionar retroalimentaci√≥n constante y ajustar seg√∫n el progreso',
        aiGenerated: true,
        generatedBy: 'Teacher AI Assistant (Fallback)',
        timestamp: new Date().toISOString(),
        basedOnPlan: plan.id
      }
    ];

    return baseActivities;
  }

  /**
   * Genera actividades espec√≠ficas para una materia
   * @param {Object} plan - Plan de apoyo
   * @param {string} subject - Materia espec√≠fica
   * @returns {Promise<Object>} - Actividades espec√≠ficas de la materia
   */
  static async generateSubjectSpecificActivities(plan, subject) {
    const subjectContexts = {
      'Lengua y Literatura': {
        focus: 'comprensi√≥n lectora, vocabulario y expresi√≥n escrita',
        materials: ['textos adaptados', 'diccionarios', 'fichas de vocabulario'],
        strategies: ['lectura guiada', 'preguntas de comprensi√≥n', 'actividades de vocabulario']
      },
      'Matem√°ticas': {
        focus: 'razonamiento l√≥gico-matem√°tico y resoluci√≥n de problemas',
        materials: ['manipulativos matem√°ticos', 'calculadoras', 'fichas de problemas'],
        strategies: ['problemas visuales', 'pr√°ctica guiada', 'ejercicios paso a paso']
      },
      'Ciencias Naturales': {
        focus: 'observaci√≥n, experimentaci√≥n y comprensi√≥n de conceptos cient√≠ficos',
        materials: ['materiales de laboratorio', 'im√°genes cient√≠ficas', 'experimentos simples'],
        strategies: ['experimentaci√≥n pr√°ctica', 'observaci√≥n guiada', 'conexiones con la vida real']
      },
      'Ciencias Sociales': {
        focus: 'comprensi√≥n de conceptos sociales y geogr√°ficos',
        materials: ['mapas', 'im√°genes hist√≥ricas', 'recursos multimedia'],
        strategies: ['an√°lisis visual', 'conexiones temporales', 'actividades de localizaci√≥n']
      }
    };

    const context = subjectContexts[subject] || subjectContexts['Lengua y Literatura'];
    
    const additionalContext = {
      notes: `Enfoque espec√≠fico en ${context.focus}. Materiales sugeridos: ${context.materials.join(', ')}. Estrategias: ${context.strategies.join(', ')}.`
    };

    return await this.generateActivitiesFromPlan(plan, subject, additionalContext);
  }

  /**
   * Modifica una actividad existente usando IA
   * @param {Object} activity - Actividad a modificar
   * @param {Object} plan - Plan de apoyo
   * @param {string} modificationRequest - Solicitud de modificaci√≥n
   * @returns {Promise<Object>} - Actividad modificada
   */
  static async modifyActivityWithAI(activity, plan, modificationRequest) {
    try {
      console.log('üîß Modificando actividad con IA...');
      
      const prompt = `
Eres un asistente de IA que ayuda a profesores a modificar actividades educativas.

ACTIVIDAD ACTUAL:
${JSON.stringify(activity, null, 2)}

PLAN DE APOYO DEL ESTUDIANTE:
${JSON.stringify(plan, null, 2)}

SOLICITUD DE MODIFICACI√ìN:
${modificationRequest}

INSTRUCCIONES:
1. Modifica la actividad seg√∫n la solicitud
2. Mant√©n la coherencia con el plan de apoyo
3. Aseg√∫rate de que siga siendo apropiada para el grado ${plan.grade}
4. Incluye las adaptaciones necesarias

Responde SOLO con JSON v√°lido de la actividad modificada.
`;

      const result = await generateContent(prompt);
      
      if (result.success) {
        const modifiedActivity = JSON.parse(result.data);
        return {
          success: true,
          activity: {
            ...modifiedActivity,
            modifiedAt: new Date().toISOString(),
            originalId: activity.id,
            modificationRequest: modificationRequest
          }
        };
      } else {
        return {
          success: false,
          error: result.error,
          originalActivity: activity
        };
      }
    } catch (error) {
      console.error('‚ùå Error modificando actividad:', error);
      return {
        success: false,
        error: error.message,
        originalActivity: activity
      };
    }
  }
}

export default TeacherActivityGeneratorService;
