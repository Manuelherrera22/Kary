import { GoogleGenerativeAI } from '@google/generative-ai';

// Configuraci√≥n de Gemini
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'AIzaSyBfQj3LxYUtLngyn3YPGJXiVs4xa0yb7QU';
const genAI = new GoogleGenerativeAI(API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// Verificar configuraci√≥n de API Key
const isGeminiConfigured = () => {
  return API_KEY && API_KEY !== 'undefined' && API_KEY !== '' && API_KEY !== 'demo-key';
};

// Funci√≥n para manejar errores de API
const handleGeminiError = (error) => {
  console.error('Error en Gemini AI:', error);
  
  if (error.message?.includes('API key not valid')) {
    return {
      success: false,
      error: 'API key de Gemini no v√°lida. Por favor, configura VITE_GEMINI_API_KEY en tu archivo .env',
      code: 'API_KEY_INVALID',
      mockResponse: getMockResponse('api_key_invalid')
    };
  }
  
  if (error.message?.includes('API key')) {
    return {
      success: false,
      error: 'API key de Gemini no configurada. Por favor, configura VITE_GEMINI_API_KEY en tu archivo .env',
      code: 'API_KEY_MISSING',
      mockResponse: getMockResponse('api_key_missing')
    };
  }
  
  return {
    success: false,
    error: `Error de Gemini AI: ${error.message}`,
    code: 'GEMINI_ERROR',
    mockResponse: getMockResponse('general_error')
  };
};

// Funci√≥n para obtener respuestas mock cuando no hay API key
const getMockResponse = (type) => {
  const mockResponses = {
    api_key_invalid: {
      message: "‚ö†Ô∏è API key de Gemini no v√°lida. El sistema est√° funcionando en modo demo.",
      suggestions: [
        "Configura VITE_GEMINI_API_KEY en tu archivo .env",
        "Obt√©n tu API key desde: https://makersuite.google.com/app/apikey",
        "Reinicia el servidor despu√©s de configurar la API key"
      ],
      isDemo: true
    },
    api_key_missing: {
      message: "üîß API key de Gemini no configurada. El sistema est√° funcionando en modo demo.",
      suggestions: [
        "Crea un archivo .env en la ra√≠z del proyecto",
        "Agrega: VITE_GEMINI_API_KEY=tu_api_key_aqui",
        "Obt√©n tu API key desde: https://makersuite.google.com/app/apikey"
      ],
      isDemo: true
    },
    general_error: {
      message: "‚ùå Error de conexi√≥n con Gemini AI. El sistema est√° funcionando en modo demo.",
      suggestions: [
        "Verifica tu conexi√≥n a internet",
        "Revisa la configuraci√≥n de la API key",
        "Contacta al administrador del sistema"
      ],
      isDemo: true
    }
  };
  
  return mockResponses[type] || mockResponses.general_error;
};

// Configuraci√≥n de generaci√≥n
const GENERATION_CONFIG = {
  temperature: 0.7,
  topK: 40,
  topP: 0.95,
  maxOutputTokens: 2048,
};

/**
 * Servicio unificado de Gemini para todos los dashboards
 */
class GeminiDashboardService {
  
  /**
   * Genera insights inteligentes para el dashboard del profesor
   */
  async generateTeacherInsights(studentData, classPerformance, recentActivities) {
    try {
      const prompt = `
      Eres un asistente educativo experto que analiza datos de clase para profesores.
      
      DATOS DE LA CLASE:
      - N√∫mero de estudiantes: ${studentData.length}
      - Rendimiento general: ${classPerformance.averageScore || 0}%
      - Actividades recientes: ${recentActivities.length}
      - Estudiantes con dificultades: ${studentData.filter(s => s.performance < 70).length}
      
      DATOS DE ESTUDIANTES:
      ${studentData.slice(0, 5).map(student => 
        `- ${student.name}: ${student.performance}% (${student.subjects.join(', ')})`
      ).join('\n')}
      
      Genera insights inteligentes y recomendaciones para el profesor:
      
      Responde SOLO con un JSON v√°lido:
      {
        "performanceAnalysis": "An√°lisis del rendimiento general de la clase",
        "topPerformers": ["Estudiante 1", "Estudiante 2"],
        "needsAttention": ["Estudiante que necesita ayuda"],
        "recommendations": [
          {
            "type": "teaching_strategy",
            "title": "Estrategia recomendada",
            "description": "Descripci√≥n de la estrategia",
            "priority": "high/medium/low"
          }
        ],
        "alerts": [
          {
            "type": "warning/success/info",
            "message": "Mensaje de alerta",
            "action": "Acci√≥n recomendada"
          }
        ],
        "nextSteps": ["Paso siguiente 1", "Paso siguiente 2"]
      }
      `;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: GENERATION_CONFIG,
      });

      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json\n?|\n?```/g, '').trim();
      const insights = JSON.parse(cleanText);
      
      return {
        success: true,
        data: insights
      };
      
    } catch (error) {
      console.error('Error generando insights del profesor:', error);
      return {
        success: false,
        error: error.message,
        data: this.getMockTeacherInsights()
      };
    }
  }

  /**
   * Genera recomendaciones personalizadas para estudiantes
   */
  async generateStudentRecommendations(studentProfile, recentPerformance, activities) {
    try {
      const prompt = `
      Eres un tutor personal que crea recomendaciones para estudiantes.
      
      PERFIL DEL ESTUDIANTE:
      - Nombre: ${studentProfile.full_name || 'Estudiante'}
      - Grado: ${studentProfile.grade || 'No especificado'}
      - Estilo de aprendizaje: ${studentProfile.learningStyle || 'visual'}
      - Intereses: ${studentProfile.interests?.join(', ') || 'Generales'}
      
      RENDIMIENTO RECIENTE:
      - Puntuaci√≥n promedio: ${recentPerformance.averageScore || 0}%
      - Actividades completadas: ${activities.completed || 0}
      - Tiempo de estudio: ${recentPerformance.studyTime || 0} horas
      
      Genera recomendaciones personalizadas:
      
      Responde SOLO con un JSON v√°lido:
      {
        "personalizedGoals": [
          {
            "title": "Meta personalizada",
            "description": "Descripci√≥n de la meta",
            "targetDate": "2024-01-15",
            "difficulty": "easy/medium/hard"
          }
        ],
        "studyPlan": {
          "dailyTime": 30,
          "subjects": ["Matem√°ticas", "Lectura"],
          "schedule": "Ma√±ana: Matem√°ticas, Tarde: Lectura"
        },
        "recommendedActivities": [
          {
            "title": "Actividad recomendada",
            "subject": "mathematics",
            "difficulty": "intermediate",
            "reason": "Para mejorar en √°lgebra"
          }
        ],
        "motivationalMessage": "Mensaje motivacional personalizado",
        "tips": ["Tip 1", "Tip 2", "Tip 3"]
      }
      `;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: GENERATION_CONFIG,
      });

      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json\n?|\n?```/g, '').trim();
      const recommendations = JSON.parse(cleanText);
      
      return {
        success: true,
        data: recommendations
      };
      
    } catch (error) {
      console.error('Error generando recomendaciones del estudiante:', error);
      return {
        success: false,
        error: error.message,
        data: this.getMockStudentRecommendations()
      };
    }
  }

  /**
   * Genera insights para padres sobre el progreso de su hijo
   */
  async generateParentInsights(childProfile, academicProgress, behavioralNotes) {
    try {
      const prompt = `
      Eres un consejero educativo que ayuda a padres a entender el progreso de sus hijos.
      
      PERFIL DEL HIJO:
      - Nombre: ${childProfile.full_name || 'Estudiante'}
      - Grado: ${childProfile.grade || 'No especificado'}
      - Edad: ${childProfile.age || 'No especificado'}
      
      PROGRESO ACAD√âMICO:
      - Rendimiento general: ${academicProgress.overallScore || 0}%
      - Materias fuertes: ${academicProgress.strongSubjects?.join(', ') || 'Ninguna'}
      - √Åreas de mejora: ${academicProgress.weakSubjects?.join(', ') || 'Ninguna'}
      
      NOTAS COMPORTAMENTALES:
      ${behavioralNotes.slice(0, 3).map(note => `- ${note}`).join('\n')}
      
      Genera insights √∫tiles para los padres:
      
      Responde SOLO con un JSON v√°lido:
      {
        "progressSummary": "Resumen del progreso acad√©mico y personal",
        "strengths": ["Fortaleza 1", "Fortaleza 2"],
        "areasForSupport": ["√Årea que necesita apoyo"],
        "homeRecommendations": [
          {
            "activity": "Actividad para casa",
            "frequency": "Diario/Semanal",
            "benefit": "Beneficio esperado"
          }
        ],
        "communicationTips": [
          "Tip para comunicarse con el ni√±o",
          "Tip para motivar el estudio"
        ],
        "redFlags": ["Se√±al de alerta si aparece"],
        "encouragement": "Mensaje de aliento para los padres"
      }
      `;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: GENERATION_CONFIG,
      });

      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json\n?|\n?```/g, '').trim();
      const insights = JSON.parse(cleanText);
      
      return {
        success: true,
        data: insights
      };
      
    } catch (error) {
      console.error('Error generando insights de padres:', error);
      return {
        success: false,
        error: error.message,
        data: this.getMockParentInsights()
      };
    }
  }

  /**
   * Genera an√°lisis psicopedag√≥gico con Gemini
   */
  async generatePsychopedagogueAnalysis(studentData, diagnosticInfo, interventionHistory) {
    try {
      const prompt = `
      Eres un psicopedagogo experto que analiza casos de estudiantes con necesidades especiales.
      
      DATOS DEL ESTUDIANTE:
      - Nombre: ${studentData.full_name || 'Estudiante'}
      - Diagn√≥stico: ${diagnosticInfo.primaryDiagnosis || 'No especificado'}
      - Necesidades: ${diagnosticInfo.specialNeeds?.join(', ') || 'Ninguna'}
      - Estilo de aprendizaje: ${diagnosticInfo.learningStyle || 'No especificado'}
      
      HISTORIAL DE INTERVENCIONES:
      ${interventionHistory.slice(0, 3).map(intervention => 
        `- ${intervention.type}: ${intervention.description}`
      ).join('\n')}
      
      Genera an√°lisis psicopedag√≥gico profesional:
      
      Responde SOLO con un JSON v√°lido:
      {
        "diagnosticSummary": "Resumen del diagn√≥stico actual",
        "strengths": ["Fortaleza identificada"],
        "challenges": ["Desaf√≠o identificado"],
        "interventionPlan": {
          "shortTerm": ["Objetivo a corto plazo"],
          "longTerm": ["Objetivo a largo plazo"],
          "strategies": ["Estrategia de intervenci√≥n"]
        },
        "recommendations": [
          {
            "type": "academic/behavioral/social",
            "title": "Recomendaci√≥n",
            "description": "Descripci√≥n detallada",
            "priority": "high/medium/low"
          }
        ],
        "progressIndicators": ["Indicador de progreso 1", "Indicador 2"],
        "nextEvaluation": "Fecha sugerida para pr√≥xima evaluaci√≥n"
      }
      `;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: GENERATION_CONFIG,
      });

      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json\n?|\n?```/g, '').trim();
      const analysis = JSON.parse(cleanText);
      
      return {
        success: true,
        data: analysis
      };
      
    } catch (error) {
      console.error('Error generando an√°lisis psicopedag√≥gico:', error);
      return {
        success: false,
        error: error.message,
        data: this.getMockPsychopedagogueAnalysis()
      };
    }
  }

  /**
   * Genera reportes administrativos con Gemini
   */
  async generateAdminReport(schoolData, performanceMetrics, resourceUsage) {
    try {
      const prompt = `
      Eres un administrador educativo que analiza datos institucionales.
      
      DATOS DE LA INSTITUCI√ìN:
      - Total de estudiantes: ${schoolData.totalStudents || 0}
      - Profesores: ${schoolData.totalTeachers || 0}
      - Cursos activos: ${schoolData.activeCourses || 0}
      
      M√âTRICAS DE RENDIMIENTO:
      - Promedio general: ${performanceMetrics.averageScore || 0}%
      - Tasa de aprobaci√≥n: ${performanceMetrics.passRate || 0}%
      - Asistencia promedio: ${performanceMetrics.attendance || 0}%
      
      USO DE RECURSOS:
      - Actividades completadas: ${resourceUsage.activitiesCompleted || 0}
      - Tiempo de uso: ${resourceUsage.totalUsageTime || 0} horas
      
      Genera reporte administrativo:
      
      Responde SOLO con un JSON v√°lido:
      {
        "executiveSummary": "Resumen ejecutivo del rendimiento institucional",
        "keyMetrics": {
          "academic": "M√©trica acad√©mica principal",
          "operational": "M√©trica operacional principal",
          "engagement": "M√©trica de engagement principal"
        },
        "trends": [
          {
            "category": "Tendencia identificada",
            "description": "Descripci√≥n de la tendencia",
            "impact": "positive/negative/neutral"
          }
        ],
        "recommendations": [
          {
            "area": "√Årea de mejora",
            "action": "Acci√≥n recomendada",
            "priority": "high/medium/low",
            "timeline": "Timeline sugerido"
          }
        ],
        "alerts": ["Alerta importante 1", "Alerta 2"],
        "nextSteps": ["Pr√≥ximo paso 1", "Pr√≥ximo paso 2"]
      }
      `;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: GENERATION_CONFIG,
      });

      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json\n?|\n?```/g, '').trim();
      const report = JSON.parse(cleanText);
      
      return {
        success: true,
        data: report
      };
      
    } catch (error) {
      console.error('Error generando reporte administrativo:', error);
      return {
        success: false,
        error: error.message,
        data: this.getMockAdminReport()
      };
    }
  }

  /**
   * Chat inteligente contextual para cualquier dashboard
   */
  async chatWithContext(message, userRole, context, userProfile) {
    try {
      // Verificar si Gemini est√° configurado
      if (!isGeminiConfigured()) {
        const mockResponse = getMockResponse('api_key_missing');
        return {
          success: true, // Retornamos success: true para mostrar el mensaje de ayuda
          data: {
            message: mockResponse.message,
            suggestions: mockResponse.suggestions,
            isDemo: true,
            timestamp: new Date().toISOString(),
            context: context
          }
        };
      }

      const prompt = `
      Eres Kary, un asistente educativo inteligente especializado en ${userRole}.
      
      PERFIL DEL USUARIO:
      - Nombre: ${userProfile.full_name || 'Usuario'}
      - Rol: ${userRole}
      - Contexto: ${context.subject || 'General'}
      
      CONTEXTO ACTUAL:
      ${JSON.stringify(context, null, 2)}
      
      MENSAJE DEL USUARIO: ${message}
      
      Responde como Kary, siendo:
      1. Especializado en el rol del usuario (${userRole})
      2. Conocedor del contexto educativo actual
      3. √ötil, preciso y motivacional
      4. Adaptado al nivel y necesidades del usuario
      
      Responde de manera natural y conversacional, m√°ximo 2 p√°rrafos.
      `;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: {
          ...GENERATION_CONFIG,
          temperature: 0.8, // M√°s creativo para chat
        },
      });

      const response = await result.response;
      const text = response.text();
      
      return {
        success: true,
        data: {
          message: text.trim(),
          timestamp: new Date().toISOString(),
          context: context
        }
      };
      
    } catch (error) {
      console.error('Error en chat contextual:', error);
      const errorResponse = handleGeminiError(error);
      return {
        success: true, // Retornamos success: true para mostrar el mensaje de ayuda
        data: {
          message: errorResponse.mockResponse.message,
          suggestions: errorResponse.mockResponse.suggestions,
          isDemo: true,
          timestamp: new Date().toISOString(),
          context: context
        }
      };
    }
  }

  // M√©todos de fallback con datos mock
  getMockTeacherInsights() {
    return {
      performanceAnalysis: "La clase muestra un rendimiento promedio s√≥lido con algunas √°reas de mejora.",
      topPerformers: ["Mar√≠a Gonz√°lez", "Carlos Ruiz"],
      needsAttention: ["Ana L√≥pez"],
      recommendations: [
        {
          type: "teaching_strategy",
          title: "Aprendizaje Colaborativo",
          description: "Implementar m√°s actividades grupales",
          priority: "medium"
        }
      ],
      alerts: [
        {
          type: "info",
          message: "La asistencia ha mejorado este mes",
          action: "Mantener las estrategias actuales"
        }
      ],
      nextSteps: ["Revisar progreso individual", "Planificar actividades grupales"]
    };
  }

  getMockStudentRecommendations() {
    return {
      personalizedGoals: [
        {
          title: "Mejorar en Matem√°ticas",
          description: "Alcanzar 80% en √°lgebra b√°sica",
          targetDate: "2024-02-15",
          difficulty: "medium"
        }
      ],
      studyPlan: {
        dailyTime: 30,
        subjects: ["Matem√°ticas", "Lectura"],
        schedule: "Ma√±ana: Matem√°ticas, Tarde: Lectura"
      },
      recommendedActivities: [
        {
          title: "Aventura Matem√°tica",
          subject: "mathematics",
          difficulty: "intermediate",
          reason: "Para mejorar en √°lgebra"
        }
      ],
      motivationalMessage: "¬°Est√°s progresando muy bien! Sigue con el excelente trabajo.",
      tips: ["Estudia en sesiones cortas", "Haz pausas regulares", "Practica todos los d√≠as"]
    };
  }

  getMockParentInsights() {
    return {
      progressSummary: "Su hijo muestra un progreso constante en todas las materias.",
      strengths: ["Creatividad", "Trabajo en equipo"],
      areasForSupport: ["Matem√°ticas avanzadas"],
      homeRecommendations: [
        {
          activity: "Lectura diaria",
          frequency: "Diario",
          benefit: "Mejora la comprensi√≥n lectora"
        }
      ],
      communicationTips: [
        "Preg√∫ntale sobre su d√≠a en la escuela",
        "Celebra sus logros acad√©micos"
      ],
      redFlags: ["Falta de inter√©s en actividades que antes disfrutaba"],
      encouragement: "Su apoyo en casa es fundamental para el √©xito acad√©mico de su hijo."
    };
  }

  getMockPsychopedagogueAnalysis() {
    return {
      diagnosticSummary: "Estudiante con necesidades de apoyo en procesamiento visual.",
      strengths: ["Memoria auditiva", "Creatividad"],
      challenges: ["Atenci√≥n sostenida", "Organizaci√≥n"],
      interventionPlan: {
        shortTerm: ["Implementar estrategias visuales"],
        longTerm: ["Desarrollar habilidades de organizaci√≥n"],
        strategies: ["Uso de colores", "Rutinas estructuradas"]
      },
      recommendations: [
        {
          type: "academic",
          title: "Apoyo Visual",
          description: "Usar materiales visuales para reforzar conceptos",
          priority: "high"
        }
      ],
      progressIndicators: ["Mejora en tareas de atenci√≥n", "Menor ansiedad en ex√°menes"],
      nextEvaluation: "2024-03-15"
    };
  }

  getMockAdminReport() {
    return {
      executiveSummary: "La instituci√≥n muestra un rendimiento acad√©mico s√≥lido con oportunidades de mejora.",
      keyMetrics: {
        academic: "85% de aprobaci√≥n general",
        operational: "95% de asistencia promedio",
        engagement: "78% de participaci√≥n en actividades"
      },
      trends: [
        {
          category: "Mejora en Matem√°ticas",
          description: "Incremento del 15% en rendimiento",
          impact: "positive"
        }
      ],
      recommendations: [
        {
          area: "Tecnolog√≠a Educativa",
          action: "Implementar m√°s herramientas digitales",
          priority: "high",
          timeline: "3 meses"
        }
      ],
      alerts: ["Necesidad de actualizar equipos de c√≥mputo"],
      nextSteps: ["Revisar presupuesto tecnol√≥gico", "Capacitar profesores"]
    };
  }
}

// Funci√≥n para generar planes de apoyo personalizados basados en PIAR - VERSI√ìN ESPECTACULAR
export const generateSupportPlan = async (studentData, piarData, context) => {
  if (!isGeminiConfigured()) {
    return {
      success: false,
      error: 'Gemini AI no configurado',
      mockResponse: getMockResponse('not_configured')
    };
  }

  try {
    const prompt = `Eres KARY AI, el asistente psicopedag√≥gico m√°s avanzado del mundo. Genera un plan de apoyo ESPECTACULAR y PROFESIONAL basado en el PIAR (Plan Individual de Apoyo y Refuerzo) del estudiante.

üéØ DATOS DEL ESTUDIANTE: ${JSON.stringify(studentData)}
üìã PIAR DEL ESTUDIANTE: ${JSON.stringify(piarData)}
üîç CONTEXTO ADICIONAL: ${JSON.stringify(context)}

‚ú® IMPORTANTE: Este plan debe ser REVOLUCIONARIO, basado en evidencia cient√≠fica y completamente personalizado.

Genera un plan de apoyo que incluya:

## üß† **AN√ÅLISIS PSICOPEDAG√ìGICO AVANZADO**
- **Fortalezas cognitivas identificadas**: An√°lisis profundo de capacidades
- **√Åreas de desarrollo espec√≠ficas**: Necesidades √∫nicas del estudiante
- **Perfil de aprendizaje**: Estilo y preferencias identificadas
- **Factores de motivaci√≥n**: Qu√© impulsa al estudiante
- **Barreras identificadas**: Obst√°culos espec√≠ficos a superar

## üéØ **OBJETIVOS ESTRAT√âGICOS MULTIDIMENSIONALES**
### **Corto Plazo (1-3 meses)**
- Objetivos espec√≠ficos, medibles y alcanzables
- Metas acad√©micas, emocionales y sociales
- Indicadores de progreso claros

### **Mediano Plazo (3-6 meses)**
- Desarrollo de competencias clave
- Fortalecimiento de habilidades base
- Integraci√≥n social y acad√©mica

### **Largo Plazo (6-12 meses)**
- Autonom√≠a y autogesti√≥n
- Competencias para la vida
- Preparaci√≥n para transiciones

## üöÄ **ESTRATEGIAS DE INTERVENCI√ìN INNOVADORAS**
### **Estrategias Acad√©micas**
- Metodolog√≠as adaptadas al perfil del estudiante
- Tecnolog√≠as de apoyo espec√≠ficas
- Adaptaciones curriculares personalizadas

### **Estrategias Emocionales**
- Regulaci√≥n emocional y autocontrol
- Desarrollo de autoestima y confianza
- Manejo de ansiedad y estr√©s

### **Estrategias Sociales**
- Habilidades de comunicaci√≥n
- Resoluci√≥n de conflictos
- Integraci√≥n grupal

### **Estrategias Conductuales**
- Sistemas de refuerzo positivo
- Estructuraci√≥n de rutinas
- Gesti√≥n de comportamientos

## üõ†Ô∏è **RECURSOS Y MATERIALES ESPECIALIZADOS**
### **Recursos Tecnol√≥gicos**
- Herramientas digitales espec√≠ficas
- Aplicaciones educativas personalizadas
- Sistemas de comunicaci√≥n aumentativa

### **Materiales Did√°cticos**
- Recursos multisensoriales
- Materiales adaptados por materia
- Herramientas de evaluaci√≥n alternativas

### **Recursos Humanos**
- Especialistas requeridos
- Formaci√≥n necesaria para el equipo
- Coordinaci√≥n interdisciplinaria

## üìä **SISTEMA DE SEGUIMIENTO Y EVALUACI√ìN**
### **Indicadores de Progreso**
- M√©tricas cuantitativas y cualitativas
- Evaluaciones formativas y sumativas
- Autoevaluaci√≥n del estudiante

### **Frecuencia de Evaluaci√≥n**
- Revisi√≥n semanal de objetivos
- Evaluaci√≥n mensual de progreso
- Revisi√≥n trimestral del plan

### **Criterios de √âxito**
- Logros acad√©micos esperados
- Desarrollo de competencias sociales
- Mejora en bienestar emocional

## ü§ù **COLABORACI√ìN Y COORDINACI√ìN**
### **Rol de la Familia**
- Estrategias para el hogar
- Comunicaci√≥n con la escuela
- Apoyo emocional

### **Rol de los Profesores**
- Adaptaciones en el aula
- Estrategias de ense√±anza
- Comunicaci√≥n con especialistas

### **Rol de Especialistas**
- Intervenciones espec√≠ficas
- Coordinaci√≥n terap√©utica
- Seguimiento especializado

## üé® **ELEMENTOS √öNICOS Y CREATIVOS**
- Actividades innovadoras espec√≠ficas para este estudiante
- Metodolog√≠as creativas adaptadas
- Elementos motivacionales √∫nicos
- Estrategias de gamificaci√≥n personalizadas

Responde en espa√±ol, con un formato PROFESIONAL y ESPECTACULAR, usando emojis para hacer el contenido m√°s atractivo y f√°cil de leer. Cada secci√≥n debe ser detallada, espec√≠fica y directamente relacionada con el PIAR del estudiante.`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    return {
      success: true,
      data: {
        supportPlan: text,
        timestamp: new Date().toISOString(),
        studentData: studentData,
        context: context,
        generatedBy: 'KARY AI - Asistente Psicopedag√≥gico Avanzado',
        version: '2.0 - Espectacular'
      }
    };
  } catch (error) {
    return handleGeminiError(error);
  }
};

// Funci√≥n para generar actividades adaptadas basadas en PIAR y plan de apoyo
export const generateAdaptedActivity = async (baseActivity, studentProfiles, supportPlans, piarData) => {
  if (!isGeminiConfigured()) {
    return {
      success: false,
      error: 'Gemini AI no configurado',
      mockResponse: getMockResponse('not_configured')
    };
  }

  try {
    const prompt = `Como especialista en educaci√≥n inclusiva, adapta la siguiente actividad considerando el PIAR y el plan de apoyo de cada estudiante:

ACTIVIDAD BASE: ${JSON.stringify(baseActivity)}
PERFILES DE ESTUDIANTES: ${JSON.stringify(studentProfiles)}
PLANES DE APOYO: ${JSON.stringify(supportPlans)}
DATOS DE PIAR: ${JSON.stringify(piarData)}

IMPORTANTE: Cada actividad DEBE estar directamente ligada al PIAR del estudiante y al plan de apoyo correspondiente.

Para cada estudiante, genera:

1. **ADAPTACI√ìN PERSONALIZADA (BASADA EN PIAR)**
   - Modificaciones espec√≠ficas seg√∫n necesidades del PIAR
   - Nivel de dificultad ajustado al PIAR
   - Materiales alternativos requeridos por el PIAR
   - C√≥mo la actividad responde a objetivos del PIAR

2. **ESTRATEGIAS DE APOYO (DEL PLAN DE APOYO)**
   - Apoyos visuales seg√∫n plan de apoyo
   - Apoyos auditivos seg√∫n plan de apoyo
   - Apoyos kinest√©sicos seg√∫n plan de apoyo
   - Estrategias espec√≠ficas del plan de apoyo

3. **CRITERIOS DE EVALUACI√ìN (LIGADOS AL PIAR)**
   - Criterios adaptados seg√∫n PIAR
   - Formas de evaluaci√≥n alternativas para PIAR
   - Indicadores de progreso del PIAR
   - M√©tricas espec√≠ficas del PIAR

4. **RECOMENDACIONES (PARA IMPLEMENTAR PIAR)**
   - Sugerencias para el profesor basadas en PIAR
   - Sugerencias para la familia seg√∫n PIAR
   - Recursos adicionales necesarios para PIAR
   - Coordinaci√≥n requerida para el PIAR

5. **SEGUIMIENTO DEL PIAR**
   - C√≥mo esta actividad contribuye al PIAR
   - Qu√© aspectos del PIAR se trabajan
   - C√≥mo registrar el progreso hacia objetivos del PIAR
   - Pr√≥ximos pasos seg√∫n el PIAR

Responde en espa√±ol, estructurado por estudiante, asegur√°ndote de que cada elemento est√© directamente relacionado con su PIAR y plan de apoyo.`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    return {
      success: true,
      data: {
        adaptedActivities: text,
        timestamp: new Date().toISOString(),
        baseActivity: baseActivity,
        studentProfiles: studentProfiles
      }
    };
  } catch (error) {
    return handleGeminiError(error);
  }
};

// Funci√≥n para generar sugerencias de actividades basadas en PIAR
export const getAISuggestion = async (context, piarData, supportPlan) => {
  if (!isGeminiConfigured()) {
    return {
      success: false,
      error: 'Gemini AI no configurado',
      mockResponse: getMockResponse('not_configured')
    };
  }

  try {
    const prompt = `Como asistente educativo especializado en necesidades especiales, genera una sugerencia de actividad basada en el PIAR del estudiante y su plan de apoyo:

CONTEXTO: ${JSON.stringify(context)}
PIAR DEL ESTUDIANTE: ${JSON.stringify(piarData)}
PLAN DE APOYO: ${JSON.stringify(supportPlan)}

IMPORTANTE: La actividad DEBE estar directamente ligada al PIAR del estudiante y considerar su plan de apoyo.

Por favor, proporciona:

1. **ACTIVIDAD EDUCATIVA (BASADA EN PIAR)**
   - Actividad espec√≠fica que responda a necesidades del PIAR
   - C√≥mo la actividad aborda objetivos del PIAR
   - Relaci√≥n con el plan de apoyo del estudiante

2. **OBJETIVOS DE APRENDIZAJE (LIGADOS AL PIAR)**
   - Objetivos espec√≠ficos derivados del PIAR
   - C√≥mo cada objetivo contribuye al PIAR
   - Objetivos del plan de apoyo que se trabajan

3. **ADAPTACIONES NECESARIAS (SEG√öN PIAR)**
   - Adaptaciones espec√≠ficas requeridas por el PIAR
   - Modificaciones seg√∫n necesidades del PIAR
   - Apoyos necesarios seg√∫n el PIAR

4. **MATERIALES REQUERIDOS (PARA PIAR)**
   - Materiales espec√≠ficos para necesidades del PIAR
   - Recursos adaptados seg√∫n PIAR
   - Herramientas necesarias para el PIAR

5. **CRITERIOS DE EVALUACI√ìN (DEL PIAR)**
   - Criterios adaptados seg√∫n PIAR
   - Formas de evaluaci√≥n para PIAR
   - Indicadores de progreso del PIAR

6. **SEGUIMIENTO DEL PIAR**
   - C√≥mo registrar el progreso hacia objetivos del PIAR
   - Qu√© aspectos del PIAR se eval√∫an
   - Pr√≥ximos pasos seg√∫n el PIAR

Responde en espa√±ol y de manera clara y estructurada, asegur√°ndote de que cada elemento est√© directamente relacionado con el PIAR del estudiante.`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    return {
      success: true,
      data: {
        suggestion: text,
        timestamp: new Date().toISOString(),
        context: context
      }
    };
  } catch (error) {
    return handleGeminiError(error);
  }
};

export default new GeminiDashboardService();
